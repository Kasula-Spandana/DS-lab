#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *link;
};
struct node *head = NULL,*cur,*temp,*temp1;
struct node *create(){
    int n;
    printf("enter number of nodes\n");
    scanf("%d",&n);
    while(n--){
        cur = (struct node*)malloc(sizeof(struct node));
        printf("enter the data\n");
        scanf("%d",&cur -> data);
        cur -> link = NULL;
        if(head == NULL){
            head = cur;
        }
        else{
            temp = head;
            while(temp -> link != NULL){
                temp = temp -> link;
            }
            temp -> link = cur;
        }
        }
        return head;
}
void display(struct node *head){
    temp = head;
    while(temp != NULL){
        printf("%d -> ",temp -> data);
        temp = temp -> link;
    }
}
struct node *insert_begin(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = head;
    head = cur;
    return head;
}
struct node *insert_end(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = NULL;
    temp = head;
    while(temp -> link != NULL){
        temp = temp -> link;
    }
    temp -> link = cur;
    return head;
}
struct node *insert_pos(int pos,int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur -> data = ele;
    int c= 1;
    temp = head;
    while(c < pos - 1){
        temp = temp -> link;
        c++;
    }
    cur -> link = temp -> link;
    temp -> link = cur;
    return head;
}
struct node *delete_begin(struct node *head){
    temp = head;
    head = temp -> link;
    printf("deleted element:%d\n",temp -> data);
    free(temp);
    return head;
}
struct node *delete_end(struct node *head){
    temp = head;
    while(temp -> link != NULL){
        temp1 = temp;
        temp = temp -> link;
    }
    temp1 -> link = NULL;
    printf("deleted element:%d\n",temp -> data);
    free(temp);
    return head;
}
struct node *delete_pos(struct node *head,int pos){
    int c= 1;
    temp = head;
    while(c < pos){
        temp1 = temp;
        temp = temp -> link;
        c++;
    }
    temp1 -> link = temp -> link;
    printf("deleted element:%d\n",temp -> data);
    free(temp);
    return head;
}
void *reverse_display(struct node *head){
    if(head != NULL){
        reverse_display(head -> link);
        printf("%d\n",head -> data);
    }
}
int search(struct node *head,int key){
    int c = 1;
    temp = head;
    while(temp != NULL){
        if(temp -> data == key){
            return c;
        }
        temp = temp -> link;
        c++;
        }
        return -1;
}
struct node *sort(struct node *head){
    int x;
    temp = head;
    while(temp != NULL){
        temp1 = temp -> link;
        while(temp1 != NULL){
            if(temp -> data > temp1 -> data){
                x = temp -> data;
                temp -> data = temp1 -> data;
                temp1 -> data = x;
            }
            temp1 = temp1 -> link;
        }
        temp = temp -> link;
    }
    return head;
}
int main(){
    int ele,key,pos,ch;
    while(1){
        printf("1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - exit\n");
        printf("enter your choice:\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:
                head = create();
                break;
            case 2:
                display(head);
                break;
            case 3:
                scanf("%d",&ele);
                head = insert_begin(ele);
                break;
            case 4:
                scanf("%d",&ele);
                head = insert_end(ele);
                break;
            case 5:
                scanf("%d",&ele);
                scanf("%d",&pos);
                head = insert_pos(pos,ele);
                break;
            case 6:
                head = delete_begin(head);
                break;
            case 7:
                head = delete_end(head);
                break;
            case 8:
                scanf("%d",&pos);
                head = delete_pos(head,pos);
                break;
            case 9:
                reverse_display(head);
                break;
            case 10:
                scanf("%d",&key);
                pos = search(head,key);
                if(pos == -1){
                    printf("element not found");
                }
                else{
                    printf("element is found at %d\n",pos);
                }
                break;
            case 11:
                head = sort(head);
                break;
            case 12:
                exit(0);
                break;
        }
    }
}

OUTPUT:
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
1
enter number of nodes
3
enter the data
5
enter the data
20
enter the data
10
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
5 -> 20 -> 10 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
3
30
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
30 -> 5 -> 20 -> 10 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
4
40
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
30 -> 5 -> 20 -> 10 -> 40 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
5
50
4
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
30 -> 5 -> 20 -> 50 -> 10 -> 40 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
6
deleted element:30
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
7
deleted element:40
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
8
4
deleted element:10
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
5 -> 20 -> 50 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
9
50
20
5
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
10
20
element is found at 2
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
11
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
5 -> 20 -> 50 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
5
10
3
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
11
1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
2
5 -> 10 -> 20 -> 50 -> 1- create  2- display 3 - insert_begin 4 - insert_end 5-insert_pos 6 - delete_begin  7 - delete_end  8 - delete_pos 9 - reverse_display 10 - search 11 - sort 12 - exit
enter your choice:
12
